# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: Slave Pipeline
trigger: none

variables:
- group: Secrets   # contains secret GITHUB_PAT

resources:
  pipelines:
  - pipeline: triggerd-by-dummy-main-pipeline
    source: liviutomoiaga.master
    project: LiviusPlayground
    trigger: true

pool:
  vmImage: ubuntu-latest

stages: 
- stage: RunPipelineSlave
  jobs:
  - job: Download_and_use_binaries
    steps:   
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProject)'
        pipeline: 'liviutomoiaga.master' # The name of the pipeline you want to download from
        buildVersionToDownload: 'latest' # Or 'latestFromBranch'
        artifactName: 'drop' # The name of the artifact you want to download
        downloadPath: '$(System.DefaultWorkingDirectory)'
      displayName: 'Download Artifacts'
    
    - script: |
        # Example: A simple deployment step that uses the downloaded binary
        ls -l $(System.DefaultWorkingDirectory)
        cat $(System.DefaultWorkingDirectory)/drop/myapp.bin
      displayName: 'Use Downloaded Artifacts'
    
    # Force failure for demo
    # - script: |
    #     echo "Introduce a failure intentionally"
    #     exit 1
    #   displayName: 'Force failure (demo)'
    # Always publish this job's result as an output variable
    - bash: |
        echo "Job result seen here: $AGENT_JOBSTATUS"
        echo "##vso[task.setvariable variable=PIPE_RESULT;isOutput=true]$AGENT_JOBSTATUS"
      name: publishResult         # <-- reference name for outputs
      displayName: 'Publish job result'
      condition: always()

- stage: Notify
  dependsOn: RunPipelineSlave
  condition: always()
  jobs:
  - job: PostStatus
    variables:
      # Pull the output variable from the previous stage/job
      BUILD_RESULT: $[ stageDependencies.RunPipelineSlave.Download_and_use_binaries.outputs['publishResult.PIPE_RESULT'] ]
    steps:
    - bash: |
      SRC="$(resources.pipeline.triggerd-by-dummy-main-pipeline.pipelineName)"
      echo "Pipeline name from resources: $SRC"

      IFS='.' read -r OWNER REPO <<< "$SRC"
      echo "Owner=$OWNER"
      echo "Repo=$REPO"

      # Export for later steps
      echo "##vso[task.setvariable variable=OWNER]$OWNER"
      echo "##vso[task.setvariable variable=REPO]$REPO"
    displayName: 'Extract OWNER and REPO from pipelineName'
    - bash: |
        echo "Sending POST request to GitHub checks endpoint..."
        echo "Upstream stage/job result: $BUILD_RESULT"
        if [ "$BUILD_RESULT" = "Succeeded" ]; then
          STATE="success"
          DESC="All checks have passed"
        else
          STATE="failure"
          DESC="Some checks have failed"
        fi
        echo "Final status: $STATE / $DESC"
        curl -sS -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: Bearer $GITHUB_PAT" \
          "https://api.github.com/repos/${OWNER}/${REPO}/statuses/$(resources.pipeline.triggerd-by-dummy-main-pipeline.sourceCommit)" \
          -d "{
            \"state\": \"$STATE\",
            \"target_url\": \"$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)\",
            \"description\": \"$DESC\",
            \"context\": \"$(Build.DefinitionName)\"
          }"
      displayName: 'Notify GitHub: All checks have passed or failed'
      # condition: and(always(), eq(variables['Build.Reason'], 'Pipeline'))
      env:
        GITHUB_PAT: $(GITHUB_PAT)
    
