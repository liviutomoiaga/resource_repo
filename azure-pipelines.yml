# Starter pipeline

parameters:
  - name: OWNER
    displayName: 'GitHub Repository Owner'
    type: string
    default: ''
  - name: REPO
    displayName: 'GitHub Repository Name'
    type: string
    default: ''
  - name: COMMIT_SHA
    displayName: 'Commit SHA to update status for'
    type: string
    default: ''
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: 2ndPipeline

trigger: none

resources:
  pipelines:
  - pipeline: triggerd-by-dummy-main-pipeline
    source: liviutomoiaga.master
    project: LiviusPlayground
    trigger: true

pool:
  vmImage: ubuntu-latest

steps:
- bash: |
    echo "Upstream project: $(resources.pipeline.triggerd-by-dummy-main-pipeline.projectName)"
    echo "Upstream pipeline: $(resources.pipeline.triggerd-by-dummy-main-pipeline.pipelineName)"
    echo "Upstream run ID:  $(resources.pipeline.triggerd-by-dummy-main-pipeline.runID)"
    echo "Upstream run URI: $(resources.pipeline.triggerd-by-dummy-main-pipeline.runURI)"
    echo "Upstream branch:  $(resources.pipeline.triggerd-by-dummy-main-pipeline.sourceBranch)"
    echo "Upstream commit:  $(resources.pipeline.triggerd-by-dummy-main-pipeline.sourceCommit)"
    echo "Current build link: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
    
- task: DownloadBuildArtifacts@1
  inputs:
    buildType: 'specific'
    project: '$(System.TeamProject)'
    pipeline: 'liviutomoiaga.master' # The name of the pipeline you want to download from
    buildVersionToDownload: 'latest' # Or 'latestFromBranch'
    artifactName: 'drop' # The name of the artifact you want to download
    downloadPath: '$(System.DefaultWorkingDirectory)'
  displayName: 'Download Artifacts'

- script: |
    # Example: A simple deployment step that uses the downloaded binary
    ls -l $(System.DefaultWorkingDirectory)
    cat $(System.DefaultWorkingDirectory)/drop/myapp.bin
  displayName: 'Use Downloaded Artifacts'

- script: |
    echo "Sending POST request to GitHub checks endpoint..."
    if [ "$AGENT_JOBSTATUS" = "Succeeded" ]; then
      STATE="success"
      DESC="All checks have passed"
    else
      STATE="failure"
      DESC="Some checks have failed"
    fi
    curl -X POST \
      -H "Accept: application/vnd.github.v3+json" \
      -H "Authorization: Bearer $(GITHUB_PAT)" \
      "https://api.github.com/repos/liviutomoiaga/master/statuses/$(resources.pipeline.triggerd-by-dummy-main-pipeline.sourceCommit)" \
      -d '{
        "state": $(STATE),
        "target_url": "https://dev.azure.com/$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)",
        "description": $(DESC),
        "context": "Azure Pipelines â€¢ Slave Pipeline Status"
      }'
    fi
  displayName: 'Notify GitHub: All checks have passed or failed'
  # condition: and(always(), eq(variables['Build.Reason'], 'Pipeline'))
  env:
    GIT_TOKEN: $(GIT_TOKEN)
    
